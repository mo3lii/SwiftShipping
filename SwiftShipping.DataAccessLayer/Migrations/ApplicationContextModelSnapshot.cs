// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SwiftShipping.DataAccessLayer.Models;

#nullable disable

namespace SwiftShipping.DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GovernmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GovernmentId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.DeliveryMan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("DeliveryMans");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.DeliveryManRegions", b =>
                {
                    b.Property<int>("DeliveryManId")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryManId", "RegionId");

                    b.HasIndex("RegionId");

                    b.ToTable("DeliveryManRegions");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Government", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Governments");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DeliveryCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrderPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("ShippingType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VillageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<bool>("isShippedToVillage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("RegionId");

                    b.HasIndex("SellerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GovernmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NormalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PickupPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("GovernmentId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.RolePermissions", b =>
                {
                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<bool>("View")
                        .HasColumnType("bit");

                    b.HasKey("RoleName", "DepartmentId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleName = "Employee",
                            DepartmentId = 1,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Employee",
                            DepartmentId = 2,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Employee",
                            DepartmentId = 3,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Employee",
                            DepartmentId = 4,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Employee",
                            DepartmentId = 5,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Employee",
                            DepartmentId = 6,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Employee",
                            DepartmentId = 7,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Employee",
                            DepartmentId = 8,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Employee",
                            DepartmentId = 9,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "DeliveryMan",
                            DepartmentId = 1,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "DeliveryMan",
                            DepartmentId = 2,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "DeliveryMan",
                            DepartmentId = 3,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "DeliveryMan",
                            DepartmentId = 4,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "DeliveryMan",
                            DepartmentId = 5,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "DeliveryMan",
                            DepartmentId = 6,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "DeliveryMan",
                            DepartmentId = 7,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "DeliveryMan",
                            DepartmentId = 8,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "DeliveryMan",
                            DepartmentId = 9,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Seller",
                            DepartmentId = 1,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Seller",
                            DepartmentId = 2,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Seller",
                            DepartmentId = 3,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Seller",
                            DepartmentId = 4,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Seller",
                            DepartmentId = 5,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Seller",
                            DepartmentId = 6,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Seller",
                            DepartmentId = 7,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Seller",
                            DepartmentId = 8,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Seller",
                            DepartmentId = 9,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Admin",
                            DepartmentId = 1,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Admin",
                            DepartmentId = 2,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Admin",
                            DepartmentId = 3,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Admin",
                            DepartmentId = 4,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Admin",
                            DepartmentId = 5,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Admin",
                            DepartmentId = 6,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Admin",
                            DepartmentId = 7,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Admin",
                            DepartmentId = 8,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        },
                        new
                        {
                            RoleName = "Admin",
                            DepartmentId = 9,
                            Add = false,
                            Delete = false,
                            Edit = false,
                            View = false
                        });
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserId");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.WeightSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("DefaultWeight")
                        .HasColumnType("real");

                    b.Property<decimal>("KGPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("WeightSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DefaultWeight = 5f,
                            KGPrice = 10m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SwiftShipping.DataAccessLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SwiftShipping.DataAccessLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwiftShipping.DataAccessLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SwiftShipping.DataAccessLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Admin", b =>
                {
                    b.HasOne("SwiftShipping.DataAccessLayer.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Branch", b =>
                {
                    b.HasOne("SwiftShipping.DataAccessLayer.Models.Government", "Government")
                        .WithMany("Branches")
                        .HasForeignKey("GovernmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Government");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.DeliveryMan", b =>
                {
                    b.HasOne("SwiftShipping.DataAccessLayer.Models.Branch", "Branch")
                        .WithMany("DeliveryMen")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwiftShipping.DataAccessLayer.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.DeliveryManRegions", b =>
                {
                    b.HasOne("SwiftShipping.DataAccessLayer.Models.DeliveryMan", "DeliveryMan")
                        .WithMany("DeliveryManRegions")
                        .HasForeignKey("DeliveryManId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwiftShipping.DataAccessLayer.Models.Region", "Region")
                        .WithMany("DeliveryManRegions")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryMan");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Employee", b =>
                {
                    b.HasOne("SwiftShipping.DataAccessLayer.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwiftShipping.DataAccessLayer.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Order", b =>
                {
                    b.HasOne("SwiftShipping.DataAccessLayer.Models.Branch", "Branch")
                        .WithMany("Orders")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwiftShipping.DataAccessLayer.Models.DeliveryMan", "DeliveryMan")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryId");

                    b.HasOne("SwiftShipping.DataAccessLayer.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwiftShipping.DataAccessLayer.Models.Seller", "Seller")
                        .WithMany("Orders")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("DeliveryMan");

                    b.Navigation("Region");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Region", b =>
                {
                    b.HasOne("SwiftShipping.DataAccessLayer.Models.Government", "Government")
                        .WithMany("Regions")
                        .HasForeignKey("GovernmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Government");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Seller", b =>
                {
                    b.HasOne("SwiftShipping.DataAccessLayer.Models.Branch", "Branch")
                        .WithMany("Sellers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwiftShipping.DataAccessLayer.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwiftShipping.DataAccessLayer.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Branch", b =>
                {
                    b.Navigation("DeliveryMen");

                    b.Navigation("Orders");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.DeliveryMan", b =>
                {
                    b.Navigation("DeliveryManRegions");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Government", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Region", b =>
                {
                    b.Navigation("DeliveryManRegions");
                });

            modelBuilder.Entity("SwiftShipping.DataAccessLayer.Models.Seller", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
